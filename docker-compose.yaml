version: '3.7'

services:
  mysql:
    image: mysql:8.0
    container_name: dev_mysql
    ports:
      - 3306:3306
    volumes:
      - ./scripts/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: zpr
      MYSQL_PASSWORD: user
    networks:
      - database

  currency-api:
    image: currency-api:dss
    build:
      context: ./currency-api
      dockerfile: Dockerfile
    ports:
      - 8082:8082
    restart: always
    networks:
      - api

  client:
    image: client:dss
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - 8080:8080
    restart: always
    environment: # Pass environment variables to the service
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/zpr?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
      APP_API_URL: http://currency-api:8082
    depends_on:
      - mysql
      - currency-api
    networks:
      - database
      - api

  dataseriesserver:
    image: dataseriesserver:dss
    build:
      context: ./data-series-server
      dockerfile: Dockerfile
    ports:
      - 8081:8081
    restart: always
    environment: # Pass environment variables to the service
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/zpr?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
    depends_on:
      - client
      - mysql
    networks:
      - database
      - frontend

  web:
    image: web:dss
    build:
      context: ./ui
      dockerfile: Dockerfile
    volumes:
      - './ui:/app'
      - '/app/node_modules'
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=development
    depends_on:
      - dataseriesserver
    networks:
      - frontend
    restart: always

# Networks to be created to facilitate communication between containers
networks:
  database:
  api:
  frontend: